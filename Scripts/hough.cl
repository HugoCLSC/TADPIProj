// TODO: First is finding the hough plane
// * Need these tables here
__constant double cosineTableGlobal[360] = {
    1,       0.9998,  0.9994,  0.9986,  0.9976,  0.9962,  0.9945,  0.9925,
    0.9903,  0.9877,  0.9848,  0.9816,  0.9781,  0.9744,  0.9703,  0.9659,
    0.9613,  0.9563,  0.9511,  0.9455,  0.9397,  0.9336,  0.9272,  0.9205,
    0.9135,  0.9063,  0.8988,  0.891,   0.8829,  0.8746,  0.866,   0.8572,
    0.848,   0.8387,  0.829,   0.8192,  0.809,   0.7986,  0.788,   0.7771,
    0.766,   0.7547,  0.7431,  0.7314,  0.7193,  0.7071,  0.6947,  0.682,
    0.6691,  0.6561,  0.6428,  0.6293,  0.6157,  0.6018,  0.5878,  0.5736,
    0.5592,  0.5446,  0.5299,  0.515,   0.5,     0.4848,  0.4695,  0.454,
    0.4384,  0.4226,  0.4067,  0.3907,  0.3746,  0.3584,  0.342,   0.3256,
    0.309,   0.2924,  0.2756,  0.2588,  0.2419,  0.225,   0.2079,  0.1908,
    0.1736,  0.1564,  0.1392,  0.1219,  0.1045,  0.0872,  0.0698,  0.0523,
    0.0349,  0.0175,  0,       -0.0175, -0.0349, -0.0523, -0.0698, -0.0872,
    -0.1045, -0.1219, -0.1392, -0.1564, -0.1736, -0.1908, -0.2079, -0.225,
    -0.2419, -0.2588, -0.2756, -0.2924, -0.309,  -0.3256, -0.342,  -0.3584,
    -0.3746, -0.3907, -0.4067, -0.4226, -0.4384, -0.454,  -0.4695, -0.4848,
    -0.5,    -0.515,  -0.5299, -0.5446, -0.5592, -0.5736, -0.5878, -0.6018,
    -0.6157, -0.6293, -0.6428, -0.6561, -0.6691, -0.682,  -0.6947, -0.7071,
    -0.7193, -0.7314, -0.7431, -0.7547, -0.766,  -0.7771, -0.788,  -0.7986,
    -0.809,  -0.8192, -0.829,  -0.8387, -0.848,  -0.8572, -0.866,  -0.8746,
    -0.8829, -0.891,  -0.8988, -0.9063, -0.9135, -0.9205, -0.9272, -0.9336,
    -0.9397, -0.9455, -0.9511, -0.9563, -0.9613, -0.9659, -0.9703, -0.9744,
    -0.9781, -0.9816, -0.9848, -0.9877, -0.9903, -0.9925, -0.9945, -0.9962,
    -0.9976, -0.9986, -0.9994, -0.9998, -1,      -0.9998, -0.9994, -0.9986,
    -0.9976, -0.9962, -0.9945, -0.9925, -0.9903, -0.9877, -0.9848, -0.9816,
    -0.9781, -0.9744, -0.9703, -0.9659, -0.9613, -0.9563, -0.9511, -0.9455,
    -0.9397, -0.9336, -0.9272, -0.9205, -0.9135, -0.9063, -0.8988, -0.891,
    -0.8829, -0.8746, -0.866,  -0.8572, -0.848,  -0.8387, -0.829,  -0.8192,
    -0.809,  -0.7986, -0.788,  -0.7771, -0.766,  -0.7547, -0.7431, -0.7314,
    -0.7193, -0.7071, -0.6947, -0.682,  -0.6691, -0.6561, -0.6428, -0.6293,
    -0.6157, -0.6018, -0.5878, -0.5736, -0.5592, -0.5446, -0.5299, -0.515,
    -0.5,    -0.4848, -0.4695, -0.454,  -0.4384, -0.4226, -0.4067, -0.3907,
    -0.3746, -0.3584, -0.342,  -0.3256, -0.309,  -0.2924, -0.2756, -0.2588,
    -0.2419, -0.225,  -0.2079, -0.1908, -0.1736, -0.1564, -0.1392, -0.1219,
    -0.1045, -0.0872, -0.0698, -0.0523, -0.0349, -0.0175, 0,       0.0175,
    0.0349,  0.0523,  0.0698,  0.0872,  0.1045,  0.1219,  0.1392,  0.1564,
    0.1736,  0.1908,  0.2079,  0.225,   0.2419,  0.2588,  0.2756,  0.2924,
    0.309,   0.3256,  0.342,   0.3584,  0.3746,  0.3907,  0.4067,  0.4226,
    0.4384,  0.454,   0.4695,  0.4848,  0.5,     0.515,   0.5299,  0.5446,
    0.5592,  0.5736,  0.5878,  0.6018,  0.6157,  0.6293,  0.6428,  0.6561,
    0.6691,  0.682,   0.6947,  0.7071,  0.7193,  0.7314,  0.7431,  0.7547,
    0.766,   0.7771,  0.788,   0.7986,  0.809,   0.8192,  0.829,   0.8387,
    0.848,   0.8572,  0.866,   0.8746,  0.8829,  0.891,   0.8988,  0.9063,
    0.9135,  0.9205,  0.9272,  0.9336,  0.9397,  0.9455,  0.9511,  0.9563,
    0.9613,  0.9659,  0.9703,  0.9744,  0.9781,  0.9816,  0.9848,  0.9877,
    0.9903,  0.9925,  0.9945,  0.9962,  0.9976,  0.9986,  0.9994,  0.9998};

__constant double sineTableGlobal[360] = {
    0,       0.0175,  0.0349,  0.0523,  0.0698,  0.0872,  0.1045,  0.1219,
    0.1392,  0.1564,  0.1736,  0.1908,  0.2079,  0.225,   0.2419,  0.2588,
    0.2756,  0.2924,  0.309,   0.3256,  0.342,   0.3584,  0.3746,  0.3907,
    0.4067,  0.4226,  0.4384,  0.454,   0.4695,  0.4848,  0.5,     0.515,
    0.5299,  0.5446,  0.5592,  0.5736,  0.5878,  0.6018,  0.6157,  0.6293,
    0.6428,  0.6561,  0.6691,  0.682,   0.6947,  0.7071,  0.7193,  0.7314,
    0.7431,  0.7547,  0.766,   0.7771,  0.788,   0.7986,  0.809,   0.8192,
    0.829,   0.8387,  0.848,   0.8572,  0.866,   0.8746,  0.8829,  0.891,
    0.8988,  0.9063,  0.9135,  0.9205,  0.9272,  0.9336,  0.9397,  0.9455,
    0.9511,  0.9563,  0.9613,  0.9659,  0.9703,  0.9744,  0.9781,  0.9816,
    0.9848,  0.9877,  0.9903,  0.9925,  0.9945,  0.9962,  0.9976,  0.9986,
    0.9994,  0.9998,  1,       0.9998,  0.9994,  0.9986,  0.9976,  0.9962,
    0.9945,  0.9925,  0.9903,  0.9877,  0.9848,  0.9816,  0.9781,  0.9744,
    0.9703,  0.9659,  0.9613,  0.9563,  0.9511,  0.9455,  0.9397,  0.9336,
    0.9272,  0.9205,  0.9135,  0.9063,  0.8988,  0.891,   0.8829,  0.8746,
    0.866,   0.8572,  0.848,   0.8387,  0.829,   0.8192,  0.809,   0.7986,
    0.788,   0.7771,  0.766,   0.7547,  0.7431,  0.7314,  0.7193,  0.7071,
    0.6947,  0.682,   0.6691,  0.6561,  0.6428,  0.6293,  0.6157,  0.6018,
    0.5878,  0.5736,  0.5592,  0.5446,  0.5299,  0.515,   0.5,     0.4848,
    0.4695,  0.454,   0.4384,  0.4226,  0.4067,  0.3907,  0.3746,  0.3584,
    0.342,   0.3256,  0.309,   0.2924,  0.2756,  0.2588,  0.2419,  0.225,
    0.2079,  0.1908,  0.1736,  0.1564,  0.1392,  0.1219,  0.1045,  0.0872,
    0.0698,  0.0523,  0.0349,  0.0175,  0,       -0.0175, -0.0349, -0.0523,
    -0.0698, -0.0872, -0.1045, -0.1219, -0.1392, -0.1564, -0.1736, -0.1908,
    -0.2079, -0.225,  -0.2419, -0.2588, -0.2756, -0.2924, -0.309,  -0.3256,
    -0.342,  -0.3584, -0.3746, -0.3907, -0.4067, -0.4226, -0.4384, -0.454,
    -0.4695, -0.4848, -0.5,    -0.515,  -0.5299, -0.5446, -0.5592, -0.5736,
    -0.5878, -0.6018, -0.6157, -0.6293, -0.6428, -0.6561, -0.6691, -0.682,
    -0.6947, -0.7071, -0.7193, -0.7314, -0.7431, -0.7547, -0.766,  -0.7771,
    -0.788,  -0.7986, -0.809,  -0.8192, -0.829,  -0.8387, -0.848,  -0.8572,
    -0.866,  -0.8746, -0.8829, -0.891,  -0.8988, -0.9063, -0.9135, -0.9205,
    -0.9272, -0.9336, -0.9397, -0.9455, -0.9511, -0.9563, -0.9613, -0.9659,
    -0.9703, -0.9744, -0.9781, -0.9816, -0.9848, -0.9877, -0.9903, -0.9925,
    -0.9945, -0.9962, -0.9976, -0.9986, -0.9994, -0.9998, -1,      -0.9998,
    -0.9994, -0.9986, -0.9976, -0.9962, -0.9945, -0.9925, -0.9903, -0.9877,
    -0.9848, -0.9816, -0.9781, -0.9744, -0.9703, -0.9659, -0.9613, -0.9563,
    -0.9511, -0.9455, -0.9397, -0.9336, -0.9272, -0.9205, -0.9135, -0.9063,
    -0.8988, -0.891,  -0.8829, -0.8746, -0.866,  -0.8572, -0.848,  -0.8387,
    -0.829,  -0.8192, -0.809,  -0.7986, -0.788,  -0.7771, -0.766,  -0.7547,
    -0.7431, -0.7314, -0.7193, -0.7071, -0.6947, -0.682,  -0.6691, -0.6561,
    -0.6428, -0.6293, -0.6157, -0.6018, -0.5878, -0.5736, -0.5592, -0.5446,
    -0.5299, -0.515,  -0.5,    -0.4848, -0.4695, -0.454,  -0.4384, -0.4226,
    -0.4067, -0.3907, -0.3746, -0.3584, -0.342,  -0.3256, -0.309,  -0.2924,
    -0.2756, -0.2588, -0.2419, -0.225,  -0.2079, -0.1908, -0.1736, -0.1564,
    -0.1392, -0.1219, -0.1045, -0.0872, -0.0698, -0.0523, -0.0349, -0.0175};
__constant sampler_t sampler_hough =
    CLK_NORMALIZED_COORDS_FALSE | // Natural coorfinates
    CLK_ADDRESS_CLAMP_TO_EDGE |   // Clamp to zeros
    CLK_FILTER_NEAREST;

// __kernel void hough_plane(__read_only image2d_t imageIn,
//                           __global float *accumulator) {

//   int2 dim = get_image_dim(imageIn);
//   int2 gid = (int2)(get_global_id(0), get_global_id(1));
//   __local double *thetas;
//   __local double *ros;
//   if (gid.x >= 0 && gid.x < dim.x && gid.y >= 0 && gid.y < dim.y) {
//   }
//   barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
// }
// //@ I think the open cl will be used to vote for accumulators
// __kernel void hough_lines(__read_only image2d_t imageIn,
//                           __global float *accumulator, const int num_thetas)
//                           {

//   int2 dim = get_image_dim(imageIn);
//   int2 gid = (int2)(get_global_id(0), get_global_id(1));
//   __local uint4 pixel;
//   if (gid.x >= 0 && gid.x < dim.x && gid.y >= 0 && gid.y < dim.y) {
//     pixel = read_imageui(imageIn, sampler_hough, (int2)gid);

//     if (pixel.x == 255) {
//     }
//   }
// }

__kernel void vote_hough_accum(__read_only image2d_t imageIn,
                               __global int *accumulator, int num_thetas,
                               int diag_len, const int minAngle,
                               const int maxAngle, int angleSpacing) {

  int2 dim = get_image_dim(imageIn);
  int2 gid = (int2)(get_global_id(0), get_global_id(1));
  int x0, y0;
  int rho;
  int pixel = read_imageui(imageIn, sampler_hough, (int2)gid).x;
  // printf("Width %d", dim.x);
  if (gid.x >= 0 && gid.x < dim.x && gid.y >= 0 && gid.y < dim.y) {

    if (pixel == 255) {
      for (int theta = minAngle; theta < maxAngle; theta += angleSpacing) {
        rho = round((gid.x - (dim.x / 2)) * cosineTableGlobal[theta] +
                    (gid.y - (dim.y / 2)) * sineTableGlobal[theta] +
                    (diag_len / 2));
        atom_inc(&accumulator[(theta + rho * num_thetas)]);
      }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
  }
}
// @ r = x cos theta + y sin theta Hesse normal form
// @ tehta needs to be -pi/2 to pi/2 (-90ยบ to 90ยบ)

//@ First is to find the rhos and thetas then vote for the lines i guess
